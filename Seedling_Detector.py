# -*- coding: utf-8 -*-
"""Untitled56.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tW5NgVWP_SF35eFkyHix8zJO7JQS9JAk
"""

import argparse
import os
import platform
import sys
from pathlib import Path
import torch
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from tkinter import filedialog
import regex as re
import glob
import pandas as pd
import statistics
from time import sleep
from detect import *

class ImageViewer:
    #MASTER
    def __init__(self, master):
        self.master = master
        master.title("Automate Eucalyptus Seedling Detector - v1.0")
        
        self.pathPastaFotos = None
        self.pathOutputFotos = None
        
        self.patternPrecisao = r'^0\.\d+$'
        self.patternTamanhoImagem = r'^\d{3,4}$'
        #############################################################################

        #BARRA DE PROGRESSO E BOTÕES

            #Barra de Progresso
        self.barraProgresso = ttk.Progressbar(master, orient='horizontal', mode='determinate')

            #Botões e Labels
        self.botaoUploadFotos = tk.Button(master, text="Carregar Pasta Com as Imagens", command=self.upload_pasta)
        self.labelUploadFotos = tk.Label(master, text="Nenhum Pasta de Imagens Selecionada")

            #Entradas e Labels
        self.entradaTamanhoImagem = tk.Entry(master, width=35,borderwidth=2)
        self.labelTamanhoImagem = tk.Label(master, text="Digite a Resolução que deseja realizar as contagens \n \n Modelo: 1280")
        self.entradaTamanhoImagem.insert(0, 'Digite a Resolução Aqui !')

        self.entradaPrecisao = tk.Entry(master, width=35,borderwidth=2)
        self.labelPrecisao = tk.Label(master, text="Digite a Precisão que deseja mostrar nas contagens \n \n Modelo: 0.60")
        self.entradaPrecisao.insert(0, 'Digite a Precisão Aqui !')

        self.entradaNomeFazenda = tk.Entry(master, width=35,borderwidth=2)
        self.labelNomeFazenda = tk.Label(master, text="Digite o nome da Fazenda que está realizando as contagens \n \n Modelo: Monte Algre - 0001")
        self.entradaNomeFazenda.insert(0, 'Digite o Nome da Fazenda Aqui !')

            #Botão Final
        self.botaoGerarFotos = tk.Button(master, text="Realizar a Contagem Automática", command=self.contagem_fotos,state="disabled")

        #############################################################################

        #LOCALIZACAO DOS BOTOES

            #Barra de Progresso
        self.barraProgresso.grid        (row=4, column=1, columnspan=2, padx=10, pady=30)

            #Botões e Labels
        self.botaoUploadFotos.grid      (row=0, column=0,               padx=30, pady=10)
        self.labelUploadFotos.grid      (row=1, column=0,               padx=10, pady=10)

            #Entradas e Labels
        self.entradaTamanhoImagem.grid  (row=1, column=1,               padx=10, pady=20)
        self.labelTamanhoImagem.grid    (row=0, column=1,               padx=10, pady=10)

        self.entradaPrecisao.grid       (row=1, column=2,               padx=10, pady=20)
        self.labelPrecisao.grid         (row=0, column=2,               padx=10, pady=10)

        self.entradaNomeFazenda.grid    (row=1, column=3,               padx=10, pady=20)
        self.labelNomeFazenda.grid      (row=0, column=3,               padx=10, pady=10)

            #Botão Final
        self.botaoGerarFotos.grid       (row=3, column=1, columnspan=2, padx=10, pady=10)

        #############################################################################

        #FUNÇÕES
    def upload_pasta(self):
        self.pathPastaFotos = filedialog.askdirectory()
        if self.pathPastaFotos:
            self.labelUploadFotos.config(text=self.pathPastaFotos)
            self.botaoGerarFotos.config(state="normal")

    def contagem_fotos(self):
        #CONFIGURANDO ERROS
            #PASTA DE FOTOS NAO SELECIONADA
        if self.pathPastaFotos is None:
            messagebox.showerror("Erro", "Pasta de Imagens Não Foi Selecionada!")
            return
        else:
            pass

            #ENTRADA DO TAMANHO DA IMAGEM
        if self.entradaTamanhoImagem.get()=='Digite a Resolução Aqui !':
            messagebox.showerror("Erro", "Digite a Resolução que deseja realizar as contagens \n \n Modelo: 1280")
            return
        else:
            pass
        if not self.entradaTamanhoImagem.get():
            messagebox.showerror("Erro", "Digite a Resolução que deseja realizar as contagens \n \n Modelo: 1280")
            return
        else:
            pass
        if bool(re.match(self.patternTamanhoImagem, self.entradaTamanhoImagem.get()))==False:
            messagebox.showerror("Erro", "Formato do Tamanho da Imagem Inválido, por favor digite nesse modelo \n \n                                          '600' ou '1200'")
            return
            
            #ENTRADA CONFERENCIA
        if self.entradaPrecisao.get()=='Digite a Resolução Aqui !':
            messagebox.showerror("Erro", "Digite a Precisão que deseja mostrar nas contagens \n \n Modelo: 0.60")
            return
        else:
            pass
        if not self.entradaPrecisao.get():
            messagebox.showerror("Erro", "Digite a Precisão que deseja mostrar nas contagens \n \n Modelo: 0.60")
            return
        else:
            pass
        if bool(re.match(self.patternPrecisao, self.entradaPrecisao.get()))==False:
            messagebox.showerror("Erro", "Formato de Precisão errado, por favor digite nesse modelo \n \n                                             '0.50'")
            return

        #COMEÇO DA FUNÇÃO
        self.pathOutputFotos = filedialog.askdirectory()
        self.tamanhoimagem = int(self.entradaTamanhoImagem.get())
        self.nomeFazenda = self.entradaNomeFazenda.get()
        self.precisao = self.entradaPrecisao.get()
        self.pastaFotos = str(self.pathPastaFotos)
        self.data = 'hyp.yaml'
        
        self.precisao = torch.tensor(float(self.precisao))
        
        #self.tamanhoimagem = tuple(self.tamanhoimagem)
        
        #self.tamanhoimagem
        #teste
        args = argparse.Namespace()
        args.weights = 'models/Modelo_01.pt'
        args.source = self.pastaFotos
        args.imgsz = (self.tamanhoimagem, self.tamanhoimagem)
        args.conf_thres = self.precisao
        args.name = self.nomeFazenda
        args.data = self.data
        args.project = self.pathOutputFotos
        args.view_img = False
        args.save_txt = True
        args.save_conf = True
        args.line_thickness=3
        args.iou_thres=0.1
        args.agnostic_nms=True
        
        # Chamar a função run com os argumentos personalizados
        run(**vars(args))
        #

        #Barra de Progresso            <>#<>
        self.barraProgresso['maximum'] = 1
        self.barraProgresso['value'] = 0
        self.barraProgresso.start()

        ################################################################################

        self.barraProgresso.grid        (row=4, column=1, columnspan=2, padx=10, pady=30)

            #Botões e Labels
        self.botaoUploadFotos.grid      (row=0, column=0,               padx=30, pady=10)
        self.labelUploadFotos.grid      (row=1, column=0,               padx=10, pady=10)

            #Entradas e Labels
        self.entradaTamanhoImagem.grid  (row=1, column=1,               padx=10, pady=20)
        self.labelTamanhoImagem.grid    (row=0, column=1,               padx=10, pady=10)

        self.entradaPrecisao.grid       (row=1, column=2,               padx=10, pady=20)
        self.labelPrecisao.grid         (row=0, column=2,               padx=10, pady=10)

        self.entradaNomeFazenda.grid    (row=1, column=3,               padx=10, pady=20)
        self.labelNomeFazenda.grid      (row=0, column=3,               padx=10, pady=10)

            #Botão Final
        self.botaoGerarFotos.grid       (row=3, column=1, columnspan=2, padx=10, pady=10)

        ########################################################################
        arquivo_saida = (self.pathOutputFotos+'/'+self.nomeFazenda)
        self.saida_cv = arquivo_saida+'/labels'
        
        self.caminho_pasta = self.saida_cv
        self.saida_pasta = self.saida_cv
    
        pasta_txt = (self.caminho_pasta+'/*.txt')
        lista_arquivos_txt = []
        for caminho_txt in glob.glob(pasta_txt):
            lista_arquivos_txt.append(caminho_txt)
        for i in range(len(lista_arquivos_txt)):
            df = pd.read_csv(lista_arquivos_txt[i], sep=" ", header=None, index_col=False)
            df = df.rename(columns={df.columns[0]:'Classe',df.columns[1]:'X_central',df.columns[2]:'Y_central',df.columns[3]:'Largura',df.columns[4]:'Altura',df.columns[5]:'Conf'})
            df['Largura'] = df['Largura'] * 1000
            df['Altura'] = df['Altura'] * 1000
            largura = df['Largura']
            altura = df['Altura']
            area = largura * altura
            df = df.assign(Area=area)
            desv_pad = statistics.pstdev(df['Area'])
            media = statistics.median(df['Area'])
            CV = (desv_pad / media) * 100
            df = df.assign(Calculo=CV)
            df = df.loc[:, ['Calculo']]
            df = df.iloc[[0]]
            nome_arquivo = str(lista_arquivos_txt[i]).split('.txt')[0].split("\\")[-1:][0]
        
            df.to_csv(self.saida_pasta+'/'+'CV_'+str(nome_arquivo)+'.txt', index=False)
        ########################################################################
        #FIM DA FUNÇÃO

        a=1
        if a==1:
            self.labelUploadFotos.grid    (row=3, column=0,               padx=10, pady=10)
            self.labelUploadFotos.config (text='Imagens Salva Nesse Caminho: ')
            self.labelPrecisao.grid    (row=4, column=0,               padx=10, pady=10)
            self.labelPrecisao.config (text='Coeficiente de Variação Salvo Nesse Caminho: ')

        if a==1:
            self.labelTamanhoImagem.grid    (row=3, column=1,               padx=10, pady=10)
            self.labelTamanhoImagem.config(text=arquivo_saida)
            self.labelNomeFazenda.grid    (row=4, column=1,               padx=10, pady=10)
            self.labelNomeFazenda.config(text=self.saida_cv)

            self.barraProgresso['value'] = 1
            self.master.update_idletasks()

        if os.path.isdir(arquivo_saida):
            self.botaoUploadFotos.grid_forget()
            self.entradaTamanhoImagem.grid_forget()
            self.entradaPrecisao.grid_forget()
            self.entradaNomeFazenda.grid_forget()
            self.botaoGerarFotos.grid_forget()        
            self.barraProgresso.stop()
            self.barraProgresso.grid_forget()
            
        
    
root = tk.Tk()
root.iconbitmap("image.ico")
image_viewer = ImageViewer(root)
root.mainloop()